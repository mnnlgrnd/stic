{"/":{"title":"Algorithmes et Programmation","content":"\n\n## [01 - Variables](notes/variables.md)\n## [02 - Tableaux](notes/tableaux.md)\n\n","lastmodified":"2022-06-04T21:03:24.289364226Z","tags":null},"/notes/fonctions":{"title":"Fonctions","content":"\n## Définition\n\n## Signature\n\n## Appel\n","lastmodified":"2022-06-04T21:03:24.289364226Z","tags":null},"/notes/tableaux":{"title":"02 - Tableaux","content":"\n## Définition\n\nUn **tableau** est une collection ordonnée de variables du même type. On accède a une variable du tableau grâce au nom du tableau et à la position de la variable dans celui-ci.\n\n## Déclaration\n\nOn déclare un tableau comme on déclare une [variable](notes/variables#déclaration), à ceci près qu'il faut rajouter l'opérateur `[]` pour indiquer qu'il s'agit d'un tableau. On peut ajouter cet opérateur soit après le **type** de données du tableau, soit après son nom. Il s'agit de déclarations équivalentes.\n\n```java\nint[] integers;\n```\n\nou\n\n```java\nint integers[];\n```\n\nOn déclare ici une variable appelée `integers` qui est un tableau de nombres entiers.\n\n## Création\n\nIl existe deux façons de créer un tableau :\n\n- On peut créer un tableau vide en indiquant sa taille, le nombre d'éléments qu'il contient :\n\n```java\nint[] integers = new int[6];\n```\n\n- On peut créer un tableau en indiquant directement les valeurs qu'il contient :\n\n```java\nint[] integers = new int[] { 1, 2, 4, 8, 16, 32 };\n```\n\nDans les deux cas, l'utilisation du mot clé `new` est obligatoire. Ce mot clé indique qu'on crée une nouvelle **référence** et est responsable de l'allocation en mémoire.\n\n\u003e⚠️ La taille d'un tableau est fixe et ne peut pas être modifiée après sa création. Si on voulait par exemple ajouter un nouvel élément au tableau, il faudrait en réalité créer un nouveau tableau de plus grande taille.\n\n### Stockage en mémoire\n\nLorsqu'un programme processing s'exécute, il possède sa propre mémoire dans laquelle seront stockées toutes les variables et tout ce qu'il se déroule dans le programme (appels de fonction, etc.). Cette mémoire se compose de deux parties :\n\n- La mémoire dite statique, le *stack*, qui contient notamment les variables (locales) de type primitif et des **références** vers des données stockées dans le *heap*\n- La mémoire dite dynamique, le *heap*, qui contient notamment des tableaux et des objets\n\n{{ partial stack_heap }}\n\n\u003e ⚠️ Le stockage en mémoire est en réalité plus complexe, l'important ici est de comprendre la différence entre une valeur et une référence. Pour plus de détails sur la gestion de la mémoire lors de l'exécution d'un programme Java, Google est votre ami.\n\n## Manipulation\n\nUne fois un tableau déclaré et créé, on peut accéder à sa taille et aux différents éléments qu'il contient.\n\n### Taille du tableau\n\nLa taille d'un tableau est déterminée à sa création et ne peut pas être changée, on peut la récupérer grâce au champ spécial `length` du tableau, de la façon suivante :\n\n```java\nint[] integers = new int[] { 1, 2, 3 };\nprintln(integers.length); // Affiche 3\n```\n\n### Elements du tableau\n\nPour accéder à un élément particulier du tableau, il faut utiliser l'opérateur de tableau et l'indice de l'élément après le nom du tableau, par exemple `[1]`.\n\n\u003e ⚠️ En informatique, on commence à compter à partir de 0. Le premier élément aura donc l'indice 0, le deuxième l'indice 1, ainsi de suite.\n\nLorsque l'on accède à un élément du tableau, on récupère une variable (celle stockée dans le heap), et on peut donc s'en servir comme tel ; c'est-à-dire lui assigner une valeur, ou l'évaluer dans des expressions.\n\n```java\nint[] integers = new int[] { 1, 2, 3 };\n\n// Evalue la variable à l'indice 0 dans le tableau et affiche 1\nprintln(integers[0]); \n\n// Assigne la valeur 0 à la variable à l'indice 1 dans le tableau\nintegers[1] = 0; \n\n// Evalue la variable à l'indice 1 dans le tableau et affiche 0\nprintln(integers[0]);\n\n// Evalue la variable à l'indice 2 dans le tableau et affiche 3\nprintln(integers[2]); \n```\n","lastmodified":"2022-06-04T21:03:24.289364226Z","tags":null},"/notes/variables":{"title":"01 - Variables","content":"\n## Définition\n\nUne variable est un **_conteneur_** défini par\n\n-   Son **type** : le type de données qu'elle pourra contenir\n-   Son **nom** : le nom à utiliser pour récupérer la valeur qu'elle contient\n\n## Types\n\nLes types de variables dits **primitifs** sont les types inhérents au langage (ici, Java), on retrouve notamment\n\n| Type      | Valeurs                                                 |\n|:--------- |:------------------------------------------------------- |\n| `boolean` | `true` ou `false`                                       |\n| `char`    | Caractère, toujours écrit entre `''`, par exemple `'a'` |\n| `short`   | Petit nombre entier entre `-128` et `127`               |\n| `int`     | Grand nombre entier entre `-2147483648` à `2147483647`  |\n| `long`    | Très grand nombre entier                                |\n| `float`   | Nombre décimal, par exemple `3.14`                      |\n| `double`  | Nombre décimal plus précis                              |\n\nNote : On peut forcer un nombre décimal à être évalué comme un `float` ou un `double` en écrivant respectivement f ou d à la fin du nombre, par exemple `3.14f` ou `3.14d`\n\n## Déclaration\n\nDéclarer une variable permet de créer une nouvelle variable qui sera désormais utilisable dans la suite du code. Pour déclarer une variable, il faut impérativement indiquer son type et son nom :\n\n```java\nint i;\n```\n\nDans ce cas-ci, la variable `i` existe maintenant en processing, mais ne contient encore aucune valeur. On peut également déclarer une nouvelle variable **et** lui donner une valeur initiale :\n\n```java\nint i = 5;\n```\n\n### Erreurs\n\n-   Lorsque l'on veut utiliser une variable qui n'existe pas, qui n'a pas été déclarée, processing affichera une erreur du type `The variable \"j\" does not exist`\n-  Lorsque l'on déclare une variable avec le même nom qu'une autre variable, processing renverra une erreur du type `Duplicate local variable i`\n\n## Assignation\n\nL'assignation consiste à définir la (nouvelle) valeur d'une variable déclarée :\n\n```java\nint i; // Déclaration\ni = 5; // Assignation\n```\n  \n\nL'assignation est donc une ligne de code du type :\n\n\\\u003cnom\\_variable\\\u003e **=** \\\u003cvaleur\\\u003e ;\n  \nLe symbole **=** est **toujours** l'opérateur qui permet d'assigner une valeur à une variable. La comparaison de deux valeurs se fait avec le symbole **\\=\\=**.\n\nOn peut mettre à droite d'une assignation tout ce qui sera _évalué_ par Processing au **même type** que la variable à laquelle on va assigner cette valeur.\n\n### Exemples\n\n```java\n// Déclarations\n\nint i;\nint j;\n\n// Assignations\n\ni = 5; // i va contenir 5\nj = 5 * 2; // j va contenir 5 * 2 -\u003e évalué à 10\ni = j; // i va contenir j -\u003e évalué à 10\ni = j * 2; // i va contenir j * 2 -\u003e évalué à 10 * 2 -\u003e évalué à 20\n```\n\n### Erreurs\n\n- Lorsque l'on veut assigner à une variable une valeur d'un type incompatible, par exemple `int i = 3.14;`, processing affichera une erreur du type `Type mismatch, \"float\" does not match with \"int\"`\n\n## Evaluation\n\nL'**évaluation** est l'interprétation, par Processing, d'un morceau de code, une **expression**, pour en déduire une **valeur.** Une expression peut être \n\n-   Une valeur (par exemple `1`, `'a'`, `true`, etc.)\n-   Une variable\n-   Un appel de fonction : le type de la valeur sera le type de retour de cette fonction\n-   Un calcul impliquant des valeurs, variables ou appels de fonction : processing respectera alors l'ordre des opérateurs/parenthèses\n\nUne expression peut donc être utilisée\n\n-   Pour une assignation\n\n```java\nint i = 5;\ni = 5 * 2;\ni = i + 1;\n```\n\n-   Dans un appel de fonction\n\n```java\nprintln(i); // On affiche ce que contient la variable i\n```\n\n### Exercices\n\n1. Que sera-t-il affiché dans la console lorsqu'on exécute le code suivant ?\n\n```java\nint i = 1;\nint j = 2;\nprintln(i);\nprintln(i + j);\ni = i + j;\nj = 2 * i;\nj = 2 * j;\nprintln(i);\nprintln(j);\n```\n\n\u003cdetails class=\"solution\"\u003e \n\u003csummary\u003eSolution\u003c/summary\u003e\n\u003cdiv class=\"highlight\"\u003e\n\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\n\u003cspan class=\"line\"\u003e3\u003c/span\u003e\n\u003cspan class=\"line\"\u003e3\u003c/span\u003e\n\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\t\t\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/details\u003e\n","lastmodified":"2022-06-04T21:03:24.289364226Z","tags":null}}